<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    default-lazy-init="true"
>
    
    <context:annotation-config />
    
    <bean id="conversionService"
    class="org.springframework.context.support.ConversionServiceFactoryBean"/>
      
    <bean id="h2.dms.dropScript" class="com.softwareplumbers.common.sql.Script">
        <property name="sql" >
            <value>
                DROP VIEW IF EXISTS VIEW_FOLDERS;
                DROP VIEW IF EXISTS VIEW_LINKS;
                DROP VIEW IF EXISTS VIEW_VERSION_LINKS;
                DROP VIEW IF EXISTS VIEW_DOCUMENT_LINKS;
                DROP VIEW IF EXISTS VIEW_DOCUMENTS;
                DROP TABLE IF EXISTS FOLDERS;
                DROP TABLE IF EXISTS DOCUMENTS;
                DROP TABLE IF EXISTS VERSIONS;
                DROP TABLE IF EXISTS LINKS;
                DROP TABLE IF EXISTS NODES;
            </value>
        </property>
    </bean>
        
    <bean id="h2.dms.createScript" class="com.softwareplumbers.common.sql.Script">
        <property name="sql" >
            <value>
                CREATE TABLE NODES (
                    ID UUID PRIMARY KEY,
                    PARENT_ID UUID,
                    NAME VARCHAR(255),
                    VERSION VARCHAR(255) DEFAULT '',
                    TYPE VARCHAR(16),
                    DELETED BOOLEAN DEFAULT FALSE
                );
                
                INSERT INTO NODES (ID, TYPE) VALUES ('00000000-0000-0000-0000-000000000000', 'WORKSPACE');

                CREATE TABLE LINKS (
                    ID UUID PRIMARY KEY,
                    DOCUMENT_ID UUID,
                    VERSION_ID UUID,
                    VERSIONED BOOLEAN
                );
                
                CREATE TABLE DOCUMENTS(
                    ID UUID PRIMARY KEY,
                    LATEST_VERSION UUID
                );

                CREATE TABLE VERSIONS (
                    DOCUMENT_ID UUID,
                    ID UUID PRIMARY KEY,
                    MEDIA_TYPE VARCHAR(255),
                    LENGTH BIGINT,
                    DIGEST BINARY(32),
                    CREATED TIMESTAMP,
                    METADATA CLOB
                );

                CREATE TABLE FOLDERS (
                    ID UUID PRIMARY KEY,
                    STATE VARCHAR(16),
                    METADATA CLOB
                );

                INSERT INTO FOLDERS (ID, STATE, METADATA) VALUES ('00000000-0000-0000-0000-000000000000', 'Open', '{}');

            </value>
        </property>
    </bean>
    
    <bean id="h2.dms.updateScript" class="com.softwareplumbers.common.sql.Script">        
        <property name="sql">
            <value>
                
                CREATE OR REPLACE VIEW VIEW_DOCUMENTS AS SELECT
                    VERSIONS.DOCUMENT_ID AS DOCUMENT_ID,
                    VERSIONS.ID AS VERSION_ID,
                    VERSIONS.MEDIA_TYPE AS MEDIA_TYPE,
                    VERSIONS.LENGTH AS LENGTH,
                    VERSIONS.DIGEST AS DIGEST,
                    VERSIONS.CREATED AS CREATED,
                    VERSIONS.METADATA AS METADATA,                    
                    NVL2(DOCUMENTS.ID,TRUE,FALSE) AS LATEST
                FROM
                    VERSIONS
                LEFT JOIN
                    DOCUMENTS ON (VERSIONS.ID = DOCUMENTS.LATEST_VERSION)
                ;
                
                CREATE OR REPLACE VIEW VIEW_DOCUMENT_LINKS AS SELECT
                    NODES.ID AS ID,
                    NODES.PARENT_ID AS PARENT_ID,
                    NODES.NAME AS NAME,
                    NODES.DELETED AS DELETED,
                    NODES.VERSION AS VERSION,
                    NODES.TYPE AS TYPE,
                    LINKS.VERSIONED AS VERSIONED,
                    VIEW_DOCUMENTS.DOCUMENT_ID AS DOCUMENT_ID,
                    VIEW_DOCUMENTS.VERSION_ID AS VERSION_ID,
                    VIEW_DOCUMENTS.MEDIA_TYPE AS MEDIA_TYPE,
                    VIEW_DOCUMENTS.LENGTH AS LENGTH,
                    VIEW_DOCUMENTS.DIGEST AS DIGEST,
                    VIEW_DOCUMENTS.CREATED AS CREATED,
                    VIEW_DOCUMENTS.METADATA AS METADATA,
                    VIEW_DOCUMENTS.LATEST AS LATEST
                FROM
                    NODES 
                INNER JOIN
                    LINKS ON (NODES.ID = LINKS.ID)
                INNER JOIN
                    VIEW_DOCUMENTS ON (LINKS.DOCUMENT_ID = VIEW_DOCUMENTS.DOCUMENT_ID)
                WHERE LINKS.VERSIONED=FALSE
                ;
                           
                CREATE OR REPLACE VIEW VIEW_VERSION_LINKS AS SELECT
                    NODES.ID AS ID,
                    NODES.PARENT_ID AS PARENT_ID,
                    NODES.NAME AS NAME,
                    NODES.DELETED AS DELETED,
                    NODES.VERSION AS VERSION,
                    NODES.TYPE AS TYPE,
                    LINKS.VERSIONED AS VERSIONED,
                    VERSIONS.DOCUMENT_ID AS DOCUMENT_ID,
                    VERSIONS.ID AS VERSION_ID,
                    VERSIONS.MEDIA_TYPE AS MEDIA_TYPE,
                    VERSIONS.LENGTH AS LENGTH,
                    VERSIONS.DIGEST AS DIGEST,
                    VERSIONS.CREATED AS CREATED,
                    VERSIONS.METADATA AS METADATA
                FROM
                    NODES 
                INNER JOIN
                    LINKS ON (NODES.ID = LINKS.ID)
                INNER JOIN
                    VERSIONS ON (LINKS.VERSION_ID = VERSIONS.ID)
                WHERE
                    LINKS.VERSIONED = TRUE
                ;
                
                CREATE OR REPLACE VIEW VIEW_LINKS AS SELECT
                    ID, 
                    PARENT_ID, 
                    NAME, 
                    DELETED, 
                    VERSION, 
                    TYPE, 
                    VERSIONED, 
                    DOCUMENT_ID, 
                    VERSION_ID, 
                    MEDIA_TYPE, 
                    LENGTH, 
                    DIGEST, 
                    CREATED, 
                    METADATA,
                    TRUE AS CURRENT 
                FROM
                    VIEW_VERSION_LINKS
                UNION ALL SELECT
                    ID, 
                    PARENT_ID, 
                    NAME, 
                    DELETED, 
                    VERSION, 
                    TYPE, 
                    VERSIONED, 
                    DOCUMENT_ID, 
                    VERSION_ID, 
                    MEDIA_TYPE, 
                    LENGTH, 
                    DIGEST, 
                    CREATED, 
                    METADATA,
                    LATEST AS CURRENT 
                FROM
                    VIEW_DOCUMENT_LINKS
                ;

                CREATE OR REPLACE VIEW VIEW_FOLDERS AS SELECT
                    NODES.ID AS ID,
                    NODES.PARENT_ID AS PARENT_ID,
                    NODES.NAME AS NAME,
                    NODES.DELETED AS DELETED,
                    NODES.VERSION AS VERSION,
                    NODES.TYPE AS TYPE,
                    FOLDERS.STATE AS STATE,
                    FOLDERS.METADATA AS METADATA
                FROM
                    NODES 
                INNER JOIN
                    FOLDERS ON (NODES.ID = FOLDERS.ID)         
                ;   
                
                DROP INDEX IF EXISTS NODE_NAME;
                CREATE UNIQUE INDEX NODE_NAME ON NODES (PARENT_ID, NAME, VERSION);
                DROP INDEX IF EXISTS VERSION_BY_DOCUMENT;
                CREATE INDEX VERSION_BY_DOCUMENT ON VERSIONS(DOCUMENT_ID);
             
            </value>
        </property>
    </bean>
    
    <bean id="h2.dms.operations" class="com.softwareplumbers.common.sql.OperationStore" scope="singleton">
        <constructor-arg>
            <map key-type="com.softwareplumbers.dms.service.sql.DocumentDatabase.Operation">
                <entry key="fetchPathToId">
                    <value>
                        WITH LINK(ID,NAME) AS (
                            SELECT ID,NODES.NAME || CASEWHEN(NODES.VERSION='', '', '@' || NODES.VERSION)
                            FROM NODES 
                            WHERE PARENT_ID = '00000000-0000-0000-0000-000000000000' 
                            UNION ALL SELECT 
                                NODES.ID, 
                                IFNULL(LINK.NAME || '/', '') || NODES.NAME || CASEWHEN(NODES.VERSION='', '', '@' || NODES.VERSION)
                            FROM LINK 
                            INNER JOIN NODES ON LINK.ID = NODES.PARENT_ID
                        ) 
                        SELECT NAME FROM LINK WHERE ID = ?
                    </value>
                </entry>

                <entry key="fetchLastNameLike" value="SELECT MAX(NAME) FROM NODES WHERE PARENT_ID=? AND NAME LIKE ?"/>

                <entry key="createDocument">
                    <value>
                        INSERT INTO DOCUMENTS (ID, LATEST_VERSION) VALUES (?,?)
                    </value>
                </entry>
                <entry key="createVersion">
                    <value>
                        INSERT INTO VERSIONS 
                            (DOCUMENT_ID, ID, MEDIA_TYPE, LENGTH, DIGEST, METADATA, CREATED) 
                        VALUES (?,?,?,?,?,?, CURRENT_TIMESTAMP)
                    </value>
                </entry>

                <entry key="createNode">
                    <value>
                        INSERT INTO NODES (ID, PARENT_ID, NAME, TYPE, DELETED) VALUES (?,?,?,?,FALSE) 
                    </value>
                </entry>

                <entry key="copyNode">
                    <value>
                        INSERT INTO NODES (ID, PARENT_ID, NAME, VERSION, TYPE, DELETED) SELECT ?, ?, NAME, VERSION, TYPE, DELETED FROM NODES WHERE ID = ?  
                    </value>
                </entry>

                <entry key="publishNode">
                    <value>
                        INSERT INTO NODES (ID, PARENT_ID, NAME, VERSION, TYPE, DELETED) SELECT ?, PARENT_ID, NAME, ?, TYPE, FALSE FROM NODES WHERE ID = ?  
                    </value>
                </entry>

                <entry key="createFolder">
                    <value>
                        INSERT INTO FOLDERS (ID, STATE, METADATA) VALUES (?,?,?)
                    </value>
                </entry>

                <entry key="copyFolder">
                    <value>
                        INSERT INTO FOLDERS (ID, STATE, METADATA) 
                        SELECT ?, STATE, METADATA
                        FROM FOLDERS
                        WHERE ID = ?
                    </value>
                </entry>

                <entry key="createLink">
                    <value>
                        INSERT INTO LINKS (ID, DOCUMENT_ID, VERSION_ID, VERSIONED) VALUES (?,?,?,?)
                    </value>
                </entry>

                <entry key="copyLink">
                    <value>
                        INSERT INTO LINKS (ID, DOCUMENT_ID, VERSION_ID, VERSIONED) 
                        SELECT ?, DOCUMENT_ID, VERSION_ID, VERSIONED
                        FROM LINKS
                        WHERE ID = ?                
                    </value>
                </entry>

                <entry key="publishLink">
                    <value>
                        INSERT INTO LINKS (ID, DOCUMENT_ID, VERSION_ID, VERSIONED) 
                        SELECT ?, DOCUMENT_ID, VERSION_ID, TRUE
                        FROM VIEW_LINKS
                        WHERE ID = ? AND VERSION='' AND CURRENT=TRUE                
                    </value>
                </entry>

                <entry key="fetchDocument">
                    <value>
                        SELECT 
                            DOCUMENT_ID, 
                            VERSION_ID,
                            CREATED,
                            MEDIA_TYPE,
                            LENGTH,
                            DIGEST,
                            METADATA
                        FROM VIEW_DOCUMENTS 
                        WHERE DOCUMENT_ID=? AND VERSION_ID=?
                    </value>
                </entry>
                
                <entry key="fetchLatestDocument">
                    <value>
                        SELECT 
                            DOCUMENT_ID, 
                            VERSION_ID,
                            CREATED,
                            MEDIA_TYPE,
                            LENGTH,
                            DIGEST,
                            METADATA
                        FROM VIEW_DOCUMENTS 
                        WHERE DOCUMENT_ID=? AND LATEST=TRUE                        
                    </value>
                </entry>

                <entry key="updateDocument">
                    <value>
                        UPDATE DOCUMENTS SET LATEST_VERSION = ? WHERE ID = ?
                    </value>
                </entry>        
                <entry key="updateLink">
                    <value>
                        UPDATE LINKS SET DOCUMENT_ID=?, VERSION_ID=? WHERE LINKS.ID=?
                    </value>
                </entry>

                <entry key="updateFolder">
                    <value>
                        UPDATE FOLDERS SET STATE=?, METADATA=? WHERE FOLDERS.ID=?
                    </value>
                </entry>

                <entry key="lockVersions">
                    <value>
                        UPDATE LINKS 
                        SET VERSIONED=TRUE, 
                            VERSION_ID=(
                                SELECT LATEST_VERSION 
                                FROM DOCUMENTS 
                                WHERE DOCUMENTS.ID=LINKS.DOCUMENT_ID
                            ) 
                        WHERE LINKS.ID IN (
                            SELECT NODES.ID 
                            FROM NODES 
                            WHERE NODES.PARENT_ID=?
                        )
                    </value>
                </entry>

                <entry key="unlockVersions">
                    <value>
                        UPDATE LINKS 
                        SET VERSIONED=FALSE 
                        WHERE LINKS.ID IN (
                            SELECT NODES.ID 
                            FROM NODES 
                            WHERE NODES.PARENT_ID=?
                        )
                    </value>
                </entry>

                <entry key="fetchChildren">
                    <value>
                        SELECT 
                            ID, 
                            PARENT_ID,
                            NAME,
                            DELETED, 
                            TYPE,
                            NAME AS PATH
                        FROM
                            NODES
                        WHERE PARENT_ID = ?
                    </value>
                </entry>

                <entry key="deleteObject">
                    <value>
                        UPDATE NODES SET DELETED=TRUE WHERE ID=?
                    </value>
                </entry>

                <entry key="deleteDocumentById">
                    <value>
                        UPDATE NODES SET DELETED=TRUE 
                        WHERE PARENT_ID=? 
                        AND EXISTS (
                            SELECT ID FROM LINKS 
                            WHERE LINKS.ID = NODES.ID AND LINKS.DOCUMENT_ID = ?
                        )
                    </value>
                </entry>
            </map>
        </constructor-arg>
    </bean>
    
    <bean id="h2.dms.templates" class="com.softwareplumbers.common.sql.TemplateStore" scope="singleton"> 
        <constructor-arg>
            <map key-type="com.softwareplumbers.dms.service.sql.DocumentDatabase.Template">
                <entry key="fetchDocumentLink">
                    <value>
                    SELECT 
                        T0.ID, 
                        T0.PARENT_ID,
                        T0.NAME,
                        T0.VERSION,
                        T0.DELETED, 
                        T0.VERSIONED,
                        T0.DOCUMENT_ID, 
                        T0.VERSION_ID,
                        T0.CREATED,
                        T0.MEDIA_TYPE,
                        T0.LENGTH,
                        T0.DIGEST,
                        T0.METADATA,
                        !{0} AS PATH
                    !{1}
                    </value>
                </entry>
                <entry key="fetchFolder">
                    <value>
                        SELECT 
                            T0.ID, 
                            T0.PARENT_ID,
                            T0.NAME,
                            T0.VERSION,
                            T0.DELETED, 
                            T0.STATE,
                            T0.METADATA,
                            !{0} AS PATH
                        !{1}
                    </value>
                </entry>
                <entry key="fetchInfo">
                    <value>
                        SELECT 
                            T0.ID, 
                            T0.PARENT_ID,
                            T0.NAME,
                            T0.VERSION,
                            T0.DELETED, 
                            T0.TYPE
                        !{0}
                    </value>
                </entry>
                <entry key="fetchDocument">
                    <value>
                        SELECT 
                            DOCUMENT_ID, 
                            VERSION_ID,
                            CREATED,
                            MEDIA_TYPE,
                            LENGTH,
                            DIGEST,
                            METADATA
                        !{0}
                    </value>
                </entry>
                <entry key="nameExpr">
                    <value>!{1} || '/' || T!{0}.NAME || CASEWHEN(T!{0}.VERSION='', '', '@' || T!{0}.VERSION)</value>
                </entry>
                <entry key="documentNameExpr">
                    <value>!{1} || '/' || T!{0}.NAME || CASEWHEN(T!{0}.VERSION='', CASEWHEN(T!{0}.CURRENT, '', '@~' || T!{0}.VERSION_ID), '@' || T!{0}.VERSION)</value>
                </entry>
                <entry key="uuidExpr">
                    <value>'!{0}'</value>
                </entry>                
            </map>
        </constructor-arg>
    </bean>

    <bean id="h2.dms.schema" class="com.softwareplumbers.common.sql.Schema"> 
        <property name="createScript" ref="h2.dms.createScript"/>
        <property name="updateScript" ref="h2.dms.updateScript"/>
        <property name="dropScript" ref="h2.dms.dropScript"/>
        <property name="supportedEntities" value="com.softwareplumbers.dms.service.sql.DocumentDatabase.EntityType"/>
        <property name="supportedTypes" value="com.softwareplumbers.dms.service.sql.DocumentDatabase.DataType"/>        
        <property name="entityMap" ref="dms.entityMap"/>        
    </bean>
    
    <bean id="h2.dms.config" class="com.softwareplumbers.common.sql.DatabaseConfig">
        <property name="schema" ref="h2.dms.schema"/>
        <property name="operations" ref="h2.dms.operations"/>
        <property name="templates" ref="h2.dms.templates"/>
    </bean>  
        
</beans>